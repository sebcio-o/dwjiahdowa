version: '3.9'
services:
  backend-prod:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: "backend-app-prod"
    command: gunicorn app.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/home/app/web/api/static
    networks:
      - prod
    expose:
      - 8000
    env_file:
      - ./.env.prod
    depends_on:
      db-prod:
        condition: service_healthy

  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: "frontend"
    volumes:
      - static_volume:/home/app/web/api/static
    networks:
      - prod
    ports:
      - 80:80
    environment:
      - NODE_ENV=production
    depends_on:
      - "backend-prod"

  db-prod:
    image: postgres:13.2
    container_name: "db-prod"
    restart: always
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - prod
    env_file:
      - ./.env.prod.db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 1s
      timeout: 2s
      retries: 5
      start_period: 10s  

  redis:
    image: redis:7.0.2-alpine
    container_name: 'collabo-prod-redis'
    restart: always
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]  
    networks:
      - prod


volumes:
  postgres_data_prod:
  static_volume:

networks:
  prod:
